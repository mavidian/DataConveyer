<?xml version="1.0" encoding="utf-8"?>
<topic id="44df6375-1f54-4440-9dac-2396a9e88527" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

      <introduction>
			<para>
            Imagine that there is a lot of work to be done by Data Conveyer. This may take some time.
         </para>
         <para>
            In the meantime we don't want to wait for too long.  What can we do?
         </para>
      </introduction>

      <section>
			<title>Wait a Minute...</title>
			<content>
				<para>... and not a moment longer!</para>

            <para>Data Conveyer supports cancellation. So, while at work, it will obediently react to a cancellation request.</para>

            <code language="c#">
               using Mavidian.DataConveyer;
               using Mavidian.DataConveyer.Orchestrators;
               var cfg = new OrchestratorConfig()
               {
                 InputDataKind = KindOfTextData.Delimited,
                 InputFileNames = "input.csv",
                 HeadersInFirstInputRow = true,
                 OutputDataKind = KindOfTextData.Keyword,
                 OutputFileNames = "output.kw"
               };
               Task&lt;ProcessResult&gt; tsk;
               ProcessResult rslt;
               using (var orchtr = OrchestratorCreator.GetEtlOrchestrator(cfg))
               {
                 tsk = orchtr.ExecuteAsync();
                 Thread.Sleep(60000); //one minute
                 //Instead of canceling the process after a period of time (depicted here),
                 // it is better to use the TimeLimit configuration setting!
                 orchtr.CancelExecution();
                 rslt = tsk.Result;
               }
               if (rslt.CompletionStatus == CompletionStatus.Canceled)
               {
                 Console.WriteLine("Conversion process was canceled after one minute!");
               }
               else if (rslt.CompletionStatus == CompletionStatus.IntakeDepleted)
               {
                 Console.WriteLine($"Successfully converted {rslt.RowsWritten} records!");
               }
            </code>
            <code language="vb">
               Imports Mavidian.DataConveyer
               Imports Mavidian.DataConveyer.Orchestrators
               Dim cfg = New OrchestratorConfig() With {
                 .InputDataKind = KindOfTextData.Delimited,
                 .InputFileNames = "input.csv",
                 .HeadersInFirstInputRow = true,
                 .OutputDataKind = KindOfTextData.Keyword,
                 .OutputFileNames = "output.kw"
               }
               Dim tsk As Task(Of ProcessResult)
               Dim rslt As ProcessResult
               Using orchtr = OrchestratorCreator.GetEtlOrchestrator(cfg)
                 tsk = orchtr.ExecuteAsync()
                 Thread.Sleep(60000)  'one minute
                 'Instead of canceling the process after a period of time (depicted here),
                 ' it is better to use the TimeLimit configuration setting!
                 orchtr.CancelExecution()
                 rslt = tsk.Result
               End Using
               If rslt.CompletionStatus = CompletionStatus.Canceled Then
                 Console.WriteLine("Conversion process was canceled after one minute!")
               ElseIf rslt.CompletionStatus = CompletionStatus.IntakeDepleted Then
                 Console.WriteLine("Successfully converted {rslt.RowsWritten} records!")
               End If
            </code>

            <para>
               The above example will work, but it is not ideal. Data Conveyer not only supports cancellation, but a timeout
               as well. So, instead of canceling after a given period of time, it is better to configure the
               <codeEntityReference>P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TimeLimit</codeEntityReference>
               setting. This way, we won't waste time waiting in case Data Conveyer process completes before the timeout expiration. 
            </para>

            <code language="c#">
               using Mavidian.DataConveyer;
               using Mavidian.DataConveyer.Orchestrators;
               var cfg = new OrchestratorConfig()
               {
                 TimeLimit = TimeSpan.FromMinutes(1),
                 InputDataKind = KindOfTextData.Delimited,
                 InputFileName = "input.csv",
                 HeadersInFirstInputRow = true,
                 OutputDataKind = KindOfTextData.Keyword,
                 OutputFileName = "output.kw"
               };
               ProcessResult rslt;
               using (var orchtr = OrchestratorCreator.GetEtlOrchestrator(cfg))
               {
                 rslt = orchtr.ExecuteAsync().Result;
               }
               if (rslt.CompletionStatus == CompletionStatus.TimedOut)
               {
                 Console.WriteLine("Conversion process timed out after one minute!");
               }
               else if (rslt.CompletionStatus == CompletionStatus.IntakeDepleted)
               {
                 Console.WriteLine($"Successfully converted {rslt.RowsWritten} records!");
               }
            </code>
            <code language="vb">
               Imports Mavidian.DataConveyer
               Imports Mavidian.DataConveyer.Orchestrators
               Dim cfg = New OrchestratorConfig() With {
                 .TimeLimit = TimeSpan.FromMinutes(1),
                 .InputDataKind = KindOfTextData.Delimited,
                 .InputFileName = "input.csv",
                 .HeadersInFirstInputRow = true,
                 .OutputDataKind = KindOfTextData.Keyword,
                 .OutputFileName = "output.kw"
               }
               Dim rslt As ProcessResult
               Using orchtr = OrchestratorCreator.GetEtlOrchestrator(cfg)
                 rslt = orchtr.ExecuteAsync().Result
               End Using
               If rslt.CompletionStatus = CompletionStatus.TimedOut Then
                 Console.WriteLine("Conversion process timed out after one minute!")
               ElseIf rslt.CompletionStatus = CompletionStatus.IntakeDepleted Then
                 Console.WriteLine("Successfully converted {rslt.RowsWritten} records!")
               End If
            </code>
            
         </content>
      </section>

      <relatedTopics>
         <link xlink:href="9bea5665-8eab-4b91-ae28-fe38d6c6398f" />    <!--Primer-->
         <link xlink:href="a37f29a4-4918-4efe-b20f-f2526ae6b518" />    <!--API Reference-->
         <link xlink:href="e2e232b9-111d-4e56-b79c-ad2815ea9495" />    <!--Glossary-->
      </relatedTopics>

   </developerConceptualDocument>
</topic>
